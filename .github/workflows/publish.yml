name: Build and Publish

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-publish:
    name: Build and Publish to PyPI and Conda
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel setuptools setuptools-rust
          pip install twine
          pip install maturin

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu

      - name: Build wheels
        env:
          RUSTFLAGS: "-C target-feature=+crt-static"
          CARGO_TERM_COLOR: always
        run: |
          mkdir -p target/wheels
          maturin build --release --strip --compatibility manylinux2014 --target x86_64-unknown-linux-gnu
          ls -la target/wheels/

      - name: Publish to PyPI
        if: success()
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine check target/wheels/*
          twine upload target/wheels/* --verbose

      - name: Set up Conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-activate-base: true
          python-version: '3.10'
          channels: conda-forge,defaults

      - name: Install conda-build tools
        shell: bash -l {0}
        run: |
          conda install -y conda-build anaconda-client conda-verify
          conda info
          conda config --show-sources
          conda list

      - name: Create conda recipe directory
        shell: bash -l {0}
        run: |
          mkdir -p conda-build
          cp -r conda/* conda-build/
          ls -la conda-build/

      - name: Build conda package
        shell: bash -l {0}
        run: |
          conda build conda-build --output-folder conda-bld/
          ls -la conda-bld/linux-64/

      - name: Upload to Anaconda
        if: success()
        shell: bash -l {0}
        env:
          ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
        run: |
          anaconda -t $ANACONDA_TOKEN upload conda-bld/linux-64/*.tar.bz2 -u migu --force 