name: Build and Publish

on:
  push:
    tags:
      - 'v*'

jobs:
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install maturin

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Create Python package structure (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          mkdir -p python/hfd
          touch python/hfd/__init__.py

      - name: Create Python package structure (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          if not exist "python\hfd" mkdir python\hfd
          type nul > python\hfd\__init__.py

      - name: Build wheels on Linux
        if: runner.os == 'Linux'
        run: |
          maturin build --release --skip-auditwheel

      - name: Build wheels on Windows/macOS
        if: runner.os != 'Linux'
        run: |
          maturin build --release

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.python-version }}
          path: target/wheels/*.whl

  publish-pypi:
    name: Publish to PyPI
    needs: [build-wheels]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine

      - name: Download wheels
        uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Move wheels
        run: |
          mkdir -p dist/all
          find dist -type f -name "*.whl" -exec mv {} dist/all/ \;

      - name: List wheels
        run: |
          ls -la dist/all/

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine check dist/all/*
          twine upload dist/all/*

  publish-conda:
    name: Publish to Conda
    needs: [build-wheels]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v3

      - name: Get version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: '3.10'

      - name: Install conda-build and anaconda-client
        shell: bash -el {0}
        run: |
          conda install -y conda-build anaconda-client

      - name: Create conda recipe
        shell: bash -el {0}
        run: |
          mkdir -p conda
          cat > conda/meta.yaml << 'EOF'
          {% set name = "hfd" %}
          {% set version = "${{ env.VERSION }}" %}
          
          package:
            name: {{ name|lower }}
            version: {{ version }}
          
          source:
            path: ..
          
          build:
            number: 0
            script: {{ PYTHON }} -m pip install . -vv
          
          requirements:
            host:
              - python
              - pip
              - maturin
              - setuptools
              - wheel
            run:
              - python
          
          about:
            home: https://github.com/migu/hfd
            summary: HuggingFace Dataset downloader
            license: MIT
          EOF

      - name: Build conda package
        shell: bash -el {0}
        run: conda build conda

      - name: Upload to Anaconda
        shell: bash -el {0}
        env:
          ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
        run: |
          anaconda -t $ANACONDA_TOKEN upload -u migu /usr/share/miniconda/conda-bld/*/*.tar.bz2 --force 